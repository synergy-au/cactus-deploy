#!/bin/bash

# 
# Constants
#

OID_2030_5="1.3.6.1.4.1.40732"         # OID base for IEEE 2030 (section 6.11.7.1 in IEEE2030.5 2018)
OID_DEV="$OID_2030_5.1"                # OID FOR "DEVICE TYPES" (SECTION 6.11.7.2 IN IEEE2030.5 2018)
OID_DEV_GENERIC="$OID_DEV.1"           # USED FOR MOST DEVICES
OID_DEV_MOBILE="$OID_DEV.2"            # USED IN ADDITION TO "GENERIC DEVICE TYPE" TO IDENTIFY "MOBILE" IEEE 2030.5 ENTITIES
OID_DEV_POST_MANUFACTURE="$OID_DEV.3"  # USED IN DEVICE CERTS ISSUED POST-MANUFACTURE
 
OID_POLICY="$OID_2030_5.2"                    # OID FOR 2030.5 POLICY ASSIGNMENTS (SECTION 6.11.7.3 IN IEEE2030.5 2018)
OID_2030_5_POLICY_TEST="$OID_POLICY.1"        # MUST BE INCLUDED IN TEST CERTIFICATES
OID_2030_5_POLICY_SELFSIGN="$OID_POLICY.2"    # MUST BE INCLUDED IN IEEE 2030.5 SELF-SIGNED CERTIFICATES
OID_2030_5_POLICY_COMMERCIAL="$OID_POLICY.3"  # MUST BE INCLUDED IN COMMERCIAL CERTIFICATES
OID_2030_5_POLICY_BULK="$OID_POLICY.4"        # MUST BE INCLUDED IN BULK-ISSUED CERTIFICATES (PRIV. KEY GENERATED BY CA, NOT BY DEVICE)

OID_2030_5_ID_ON_HARDWARE_MODULE_NAME="1.3.6.1.5.5.7.8.4"

#
# Utility Functions
#

usage() {
    echo "create-cert SERCA_ID [CHAIN_ID] [CHAIN_SERIAL] [SERVER_DNS] [SERVER_SERIAL]"
    echo ""
    echo "Creates the specified chain of certificate(s) and keys up to the last specified parameter."
    echo "Will NOT replace existing certs (you will need to manually delete those to force a refresh)"
    echo ""
    echo "SERCA_ID = Mandatory unique id of the root SERCA"
    echo "CHAIN_ID = Optional unique id for the MCA/MICA chain underneath SERCA_ID"
    echo "CHAIN_SERIAL = Optional unique number for the MCA/MICA chain serial number underneath SERCA_ID"
    echo "SERVER_DNS = Optional will create a DNS server certificate underneath the specified MCA/MICA chain"
    echo "SERVER_SERIAL = Optional unique number for the server certificate"
    echo ""
    echo "NOTE: All parameters form parts of a file/folder name"
    exit 1
}

calculate_key_identifier() {
    local key_file=$1
    local pub_file=$2

    # Generate subjectKeyIdentifier from the public key (Method is referenced in 2030.5 - Section 6.11.6)
    # Method requires the least significant 60 bits of the SHA-1 public key 
    openssl ec -in "$key_file" -pubout -outform DER -out "$pub_file" || { echo "Failure to extract public key"; exit 1; }
    local sha1_hash=$(openssl dgst -sha1 -binary "$pub_file" | xxd -p)
    echo "4${sha1_hash:15}"
    return 0
}

# Parse parameters
SERCA_ID="$1"
CHAIN_ID="$2"
CHAIN_SERIAL="$3"
SERVER_DNS="$4"
SERVER_SERIAL="$5"
if [[ -z "${SERCA_ID}" ]]; then
    echo "ERROR - No SERCA_ID specified."
    echo ""
    usage
fi

if [[ -n "${CHAIN_ID}" && -z "${CHAIN_SERIAL}" ]]; then
    echo "ERROR - CHAIN_ID was specified but CHAIN_SERIAL was left blank."
    echo ""
    usage
fi

if [[ -n "${SERVER_DNS}" && -z "${SERVER_SERIAL}" ]]; then
    echo "ERROR - SERVER_DNS was specified but SERVER_SERIAL was left blank."
    echo ""
    usage
fi

days_until_9999=$(echo $(( ( $(date -d '9999-12-31' +%s) - $(date +%s) ) / 86400 )))

# 
# SERCA Calculation
#
SERCA_DIR="./$SERCA_ID"
SERCA_KEY_FILE="$SERCA_DIR/serca.key.pem"
SERCA_CERT_FILE="$SERCA_DIR/serca.cert.pem"
SERCA_CSR_FILE="$SERCA_DIR/.csr.pem"
SERCA_PUB_FILE="$SERCA_DIR/.pub.der"
SERCA_CFG_FILE="$SERCA_DIR/.openssl.cnf"



if [ ! -f "$SERCA_KEY_FILE" ]; then
    echo "Creating SERCA key/cert at '$SERCA_DIR/'"
    mkdir -p "$SERCA_DIR" || exit 1

    # Generate key
    openssl ecparam -name prime256v1 -genkey -noout -out "$SERCA_KEY_FILE" || { echo "Failure to generate key"; exit 1; }
    chmod 400 "$SERCA_KEY_FILE"

    # Generate CSR
    KEY_IDENTIFIER=$(calculate_key_identifier "$SERCA_KEY_FILE" "$SERCA_PUB_FILE")
    cat > "$SERCA_CFG_FILE" <<EOL
[ req ]
req_extensions = serca_ca
prompt = no

[ serca_ca ]
basicConstraints       = critical,CA:true
keyUsage               = critical, keyCertSign, cRLSign
subjectKeyIdentifier   = $KEY_IDENTIFIER
EOL
    openssl req -new -key "$SERCA_KEY_FILE" -out "$SERCA_CSR_FILE" -config "$SERCA_CFG_FILE" -subj '/O=Smart Energy/CN=IEEE 2030.5 Root' || { echo "Failure to generate CSR"; exit 1; }
    openssl x509 -req -in "$SERCA_CSR_FILE" -signkey "$SERCA_KEY_FILE" -out "$SERCA_CERT_FILE" -days $days_until_9999 -extfile "$SERCA_CFG_FILE" -extensions serca_ca -sha256 || { echo "Failure to generate CERT"; exit 1; }
    echo "Generated: $SERCA_KEY_FILE" 
    echo "Generated: $SERCA_CERT_FILE" 
else
    echo "SERCA key '$SERCA_KEY_FILE' already exists in '$SERCA_DIR/'. Skipping SERCA generation."
fi


if [[ -z "$CHAIN_ID" ]]; then
    echo "Done."
    exit 0
fi

# 
# MCA Calculation
#

CHAIN_DIR="./$CHAIN_ID"
MCA_KEY_FILE="$CHAIN_DIR/mca.key.pem"
MCA_CERT_FILE="$CHAIN_DIR/mca.cert.pem"
MCA_CSR_FILE="$CHAIN_DIR/.mca.csr.pem"
MCA_PUB_FILE="$CHAIN_DIR/.mca.pub.der"
MCA_CFG_FILE="$CHAIN_DIR/.mca.openssl.cnf"


if [ ! -f "$MCA_KEY_FILE" ]; then
    echo "Creating MCA key/cert at '$CHAIN_DIR/'"
    mkdir -p "$CHAIN_DIR" || exit 1

    # Generate key
    openssl ecparam -name prime256v1 -genkey -noout -out "$MCA_KEY_FILE" || { echo "Failure to generate key"; exit 1; }
    chmod 400 "$MCA_KEY_FILE"

    # Generate CSR
    KEY_IDENTIFIER=$(calculate_key_identifier "$MCA_KEY_FILE" "$MCA_PUB_FILE")
    cat > "$MCA_CFG_FILE" <<EOL
[ req ]
req_extensions = mca_ca
prompt = no

[ mca_ca ]
subjectKeyIdentifier   = $KEY_IDENTIFIER
basicConstraints       = critical,CA:true,pathlen:1
keyUsage               = critical, keyCertSign
certificatePolicies    = $OID_DEV_GENERIC,$OID_2030_5_POLICY_TEST
EOL
    openssl req -new -key "$MCA_KEY_FILE" -out "$MCA_CSR_FILE" -config "$MCA_CFG_FILE" -subj "/C=AU/O=CACTUS $CHAIN_ID/CN=IEEE 2030.5 MCA,serialNumber=$CHAIN_SERIAL" || { echo "Failure to generate CSR"; exit 1; }
    openssl x509 -req -in "$MCA_CSR_FILE" -CA "$SERCA_CERT_FILE" -CAkey "$SERCA_KEY_FILE" -set_serial "$CHAIN_SERIAL" -out "$MCA_CERT_FILE" -days $days_until_9999 -extfile "$MCA_CFG_FILE" -extensions mca_ca -sha256
    echo "Generated: $MCA_KEY_FILE" 
    echo "Generated: $MCA_CERT_FILE" 
else
    echo "MCA key '$MCA_KEY_FILE' already exists in '$CHAIN_DIR/'. Skipping MCA generation."
fi


# 
# MICA Calculation
#

MICA_KEY_FILE="$CHAIN_DIR/mica.key.pem"
MICA_CERT_FILE="$CHAIN_DIR/mica.cert.pem"
MICA_CSR_FILE="$CHAIN_DIR/.mica.csr.pem"
MICA_PUB_FILE="$CHAIN_DIR/.mica.pub.der"
MICA_CFG_FILE="$CHAIN_DIR/.mica.openssl.cnf"


if [ ! -f "$MICA_KEY_FILE" ]; then
    echo "Creating MICA key/cert at '$CHAIN_DIR/'"
    mkdir -p "$CHAIN_DIR" || exit 1

    # Generate key
    openssl ecparam -name prime256v1 -genkey -noout -out "$MICA_KEY_FILE" || { echo "Failure to generate key"; exit 1; }
    chmod 400 "$MICA_KEY_FILE"

    # Generate CSR
    KEY_IDENTIFIER=$(calculate_key_identifier "$MICA_KEY_FILE" "$MICA_PUB_FILE")
    cat > "$MICA_CFG_FILE" <<EOL
[ req ]
req_extensions = mica_ca
prompt = no

[ mica_ca ]
subjectKeyIdentifier   = $KEY_IDENTIFIER
basicConstraints       = critical,CA:true,pathlen:0
keyUsage               = critical, keyCertSign
certificatePolicies    = $OID_DEV_GENERIC,$OID_2030_5_POLICY_TEST
EOL
    openssl req -new -key "$MICA_KEY_FILE" -out "$MICA_CSR_FILE" -config "$MICA_CFG_FILE" -subj "/C=AU/O=CACTUS $CHAIN_ID/CN=IEEE 2030.5 MICA,serialNumber=$CHAIN_SERIAL" || { echo "Failure to generate CSR"; exit 1; }
    openssl x509 -req -in "$MICA_CSR_FILE" -CA "$MCA_CERT_FILE" -CAkey "$MCA_KEY_FILE" -set_serial "$CHAIN_SERIAL" -out "$MICA_CERT_FILE" -days $days_until_9999 -extfile "$MICA_CFG_FILE" -extensions mica_ca -sha256
    echo "Generated: $MICA_KEY_FILE" 
    echo "Generated: $MICA_CERT_FILE" 
else
    echo "MICA key '$MICA_KEY_FILE' already exists in '$CHAIN_DIR/'. Skipping MICA generation."
fi


if [[ -z "$SERVER_DNS" ]]; then
    echo "Done."
    exit 0
fi

# 
# Server Calculation
#

SERVER_DIR="./$SERVER_DNS"
SERVER_KEY_FILE="$SERVER_DIR/$SERVER_DNS.key.pem"
SERVER_CERT_FILE="$SERVER_DIR/$SERVER_DNS.cert.pem"
SERVER_CSR_FILE="$SERVER_DIR/.csr.pem"
SERVER_PUB_FILE="$SERVER_DIR/.pub.der"
SERVER_CFG_FILE="$SERVER_DIR/.openssl.cnf"

if [ ! -f "$SERVER_KEY_FILE" ]; then
    echo "Creating Server key/cert at '$SERVER_DIR/'"
    mkdir -p "$SERVER_DIR" || exit 1

    # Generate key
    openssl ecparam -name prime256v1 -genkey -noout -out "$SERVER_KEY_FILE" || { echo "Failure to generate key"; exit 1; }
    chmod 400 "$SERVER_KEY_FILE"

    # Generate CSR
    KEY_IDENTIFIER=$(calculate_key_identifier "$SERVER_KEY_FILE" "$SERVER_PUB_FILE")
    cat > "$SERVER_CFG_FILE" <<EOL
[ req ]
distinguished_name = empty_distinguished_name
req_extensions = server
prompt = no

[ server ]
subjectKeyIdentifier   = $KEY_IDENTIFIER
keyUsage               = critical, keyAgreement, digitalSignature
certificatePolicies    = $OID_DEV_GENERIC,$OID_2030_5_POLICY_TEST
subjectAltName         = critical,@alt_names

[ empty_distinguished_name ]

[ HardwareModuleName ]
hwType=OID:1.3.6.1.4.1.28547.1.1.1 # Identifies ANU
hwSerialNum=OCT:cactus-$SERVER_DNS # TO BE UPDATED PER UNIQUE CLIENT
 
[ alt_names ]
otherName.1 = $OID_2030_5_ID_ON_HARDWARE_MODULE_NAME;SEQ:HardwareModuleName
DNS.1 = $SERVER_DNS
EOL
    openssl req -new -key "$SERVER_KEY_FILE" -out "$SERVER_CSR_FILE" -config "$SERVER_CFG_FILE" -subj "/" || { echo "Failure to generate CSR"; exit 1; }
    openssl x509 -req -in "$SERVER_CSR_FILE" -CA "$MICA_CERT_FILE" -CAkey "$MICA_KEY_FILE" -set_serial "$SERVER_SERIAL" -out "$SERVER_CERT_FILE" -days $days_until_9999 -extfile "$SERVER_CFG_FILE" -extensions server -sha256
    echo "Generated: $SERVER_KEY_FILE" 
    echo "Generated: $SERVER_CERT_FILE" 
else
    echo "Server key '$SERVER_KEY_FILE' already exists in '$SERVER_DIR/'. Skipping server cert generation."
fi


echo "Done."
exit 0